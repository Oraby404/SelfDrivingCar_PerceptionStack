import glob
import os
import sys

try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla

import random
import time

actor_list = []

# In this tutorial script, we are going to add a vehicle to the simulation
# and let it drive in autopilot. We will also create a camera attached to
# that vehicle, and save all the images generated by the camera to disk.


# First of all, we need to create the client that will send the requests
# to the simulator. Here we'll assume the simulator is accepting
# requests in the localhost at port 2000.
client = carla.Client('localhost', 2000)
client.set_timeout(2.0)

# Once we have a client we can retrieve the world that is currently
# running.
world = client.get_world()

# The world contains the list blueprints that we can use for adding new
# actors into the simulation.
blueprint_library = world.get_blueprint_library()

vehicle_bp = blueprint_library.find('vehicle.ford.mustang')
vehicle_bp.set_attribute('color', '10,10,10')
vehicle_transform = random.choice(world.get_map().get_spawn_points())
vehicle = world.spawn_actor(vehicle_bp, vehicle_transform)
vehicle.set_autopilot(True)

actor_list.append(vehicle)
print('created %s' % vehicle.type_id)

# transform we give here is now relative to the vehicle.
camera_bp = blueprint_library.find('sensor.camera.rgb')
camera_transform = carla.Transform(carla.Location(x=1.3, y=0, z=1.3))
camera = world.spawn_actor(camera_bp, camera_transform, attach_to=vehicle)

actor_list.append(camera)
print('created %s' % camera.type_id)

# Now we register the function that will be called each time the sensor
# receives an image. In this example we are saving the image to disk
camera.listen(lambda image: image.save_to_disk('_out/%06d.png' % image.frame))

# But the city now is probably quite empty, let's add a few more
# vehicles.
vehicle_transform.location += carla.Location(x=40, y=-3.2)
vehicle_transform.rotation.yaw = -180.0
for _ in range(0, 10):
    vehicle_transform.location.x += 8.0

    bp = random.choice(blueprint_library.filter('vehicle'))

    # This time we are using try_spawn_actor. If the spot is already
    # occupied by another object, the function will return None.
    npc = world.try_spawn_actor(bp, vehicle_transform)
    if npc is not None:
        actor_list.append(npc)
        npc.set_autopilot(True)
        print('created %s' % npc.type_id)

time.sleep(5)
